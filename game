#!/usr/bin/perl
#creates a variable that can retain its value after it has gone out of function
use feature 'state';
#definition of mark(Players) and board(game) constant variables, only available to be read
use constant MARKS=>[ 'X', 'O' ];
use constant BOARD=>'
  1 │ 2 │ 3 
 ───┼───┼───
  4 │ 5 │ 6 
 ───┼───┼───
  7 │ 8 │ 9 
';
# Function that allows access to the variables MARKS and BOARD
sub get_mark {
   my $game = shift;
   my @nums = $game =~ /[1-9]/g;
   my $indx = (@nums+1) % 2;

   return MARKS->[$indx];
}
#Function that allows to set the mark that was already gotten with
#the function get_mark
sub put_mark {
   my $game = shift;
   my $mark = shift;
   my $move = shift;
   $game =~ s/$move/$mark/;
   return $game;
}
#function using regular expression in order to evaluate to true
#only if the line contains one character in the range from
#1 to 9(the movement of the player on the board)
sub get_move {
   return (<> =~ /^[1-9]$/) ? $& : '0';
}

#Core function that uses "my" keyword in order to allow variables
#mark and move change and take a different value that the one
#they had.
#this part allows to keep the rep of the board and
#movements in-memory, showing it on the output
PROMPT: {
   state $game = BOARD;

   my $mark;
   my $move;

   print $game;
   #Holds the in-memory representation of the Tic-tac-toe
   #gameboad, matching any character in the range from 1 to 9
   last PROMPT if ($game !~ /[1-9]/);

   $mark = get_mark $game;
   print "$mark\'s move?: ";

   $move = get_move;
   $game = put_mark $game, $mark, $move;

   redo PROMPT;
}
